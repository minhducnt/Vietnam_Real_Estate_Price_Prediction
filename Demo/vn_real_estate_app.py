# MARK: - Import Libraries
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from folium.plugins import HeatMap
import plotly.express as px
import plotly.graph_objects as go
from pyspark.sql import SparkSession
from pyspark.ml.feature import VectorAssembler, StandardScaler
from pyspark.ml.regression import GBTRegressor
from pyspark.ml import Pipeline
from pyspark.ml.evaluation import RegressionEvaluator
import os
import time
from pyngrok import ngrok

# MARK: - Global Variables
# Kh·ªüi t·∫°o bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u t√™n c·ªôt
FEATURE_COLUMNS = {
    'area': 'area (m2)',
    'street': 'street (m)'
}

# Thi·∫øt l·∫≠p trang v·ªõi giao di·ªán hi·ªán ƒë·∫°i
st.set_page_config(
    page_title="D·ª± ƒêo√°n Gi√° B·∫•t ƒê·ªông S·∫£n Vi·ªát Nam",
    page_icon="üè†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS t√πy ch·ªânh ƒë·ªÉ t·∫°o giao di·ªán hi·ªán ƒë·∫°i
st.markdown('''
<style>
    /* Import Literata font with Vietnamese support */
    @import url('https://fonts.googleapis.com/css2?family=Literata:wght@200;300;400;500;600;700;800;900&display=swap&subset=latin,latin-ext,vietnamese');

    /* Main content area styling */
    .main {
        background-color: #f8f9fa;
        margin-left: 250px;
        padding: 1rem 2rem;
    }

    /* Global font styling */
    .stApp {
        font-family: 'Literata', serif;
    }

    /* Text elements styling */
    h1, h2, h3, h4, h5, h6, .stMarkdown, .stText, button, input, optgroup, select, textarea {
        font-family: 'Literata', serif !important;
    }

    /* Custom dark sidebar styling */
    [data-testid="stSidebar"] {
        background-color: #1a202c;
        padding-top: 0;
        min-width: 280px !important;
        max-width: 280px !important;
    }

    [data-testid="stSidebar"] .css-6qob1r {
        background-color: #1a202c;
    }

    /* Sidebar header styling */
    .sidebar-header {
        background: linear-gradient(to right, #2c5282, #1a365d);
        padding: 1.5rem 1rem;
        text-align: center;
        margin-bottom: 1.6rem;
        border-bottom: 1px solid rgba(255,255,255,0.1);
        border-radius: 0.8rem;
    }

    .sidebar-header img {
        max-width: 40px;
        margin-bottom: 0.5rem;
    }

    /* Sidebar navigation styling */
    .nav-link {
        display: block;
        padding: 0.75rem 1rem;
        margin: 0.25rem 0.75rem;
        border-radius: 0.5rem;
        text-decoration: none;
        color: white !important;
        transition: all 0.2s ease;
    }

    .nav-link:hover {
        background-color: rgba(255,255,255,0.1);
    }

    .nav-link.active {
        background-color: #4c9aff;
        color: white !important;
        font-weight: 600;
    }

    /* Sidebar text color */
    [data-testid="stSidebar"] .css-eczf16,
    [data-testid="stSidebar"] h1,
    [data-testid="stSidebar"] h2,
    [data-testid="stSidebar"] h3,
    [data-testid="stSidebar"] h4,
    [data-testid="stSidebar"] h5,
    [data-testid="stSidebar"] p,
    [data-testid="stSidebar"] div,
    [data-testid="stSidebar"] span,
    [data-testid="stSidebar"] label,
    [data-testid="stSidebar"] .stSelectbox label {
        color: white !important;
    }

    /* Custom sidebar buttons */
    [data-testid="stSidebar"] button {
        background-color: #2d3748 !important;
        color: white !important;
        border: none !important;
    }

    [data-testid="stSidebar"] button:hover {
        background-color: #4A5568 !important;
    }

    /* Custom selectbox in sidebar */
    [data-testid="stSidebar"] .stSelectbox {
        margin-bottom: 0.5rem;
    }

    [data-testid="stSidebar"] .stSelectbox > div > div {
        background-color: #2d3748 !important;
        color: white !important;
        border: none !important;
    }

    /* Metrics styling */
    [data-testid="stMetricValue"] {
        color: #4c9aff !important;
        font-weight: bold !important;
    }
    .stTabs [data-baseweb="tab-list"] {
        gap: 10px;
    }
    .stTabs [data-baseweb="tab"] {
        height: 50px;
        white-space: pre-wrap;
        background-color: #f1f3f4;
        border-radius: 5px 5px 0px 0px;
        gap: 1px;
        padding-top: 10px;
        padding-bottom: 10px;
    }
    .stTabs [aria-selected="true"] {
        background-color: #4c9aff;
        color: white;
    }
    .stButton>button {
        background-color: #4c9aff;
        color: white;
        border-radius: 5px;
        border: none;
        padding: 10px 20px;
        font-weight: 500;
    }
    .stButton>button:hover {
        background-color: #3d7ecc;
        color: white;
    }
    div[data-testid="stMetricValue"] {
        font-size: 1.5rem;
        font-weight: bold;
    }
    div[data-testid="stMetricLabel"] {
        font-size: 1rem;
    }

    /* Sidebar metrics styling */
    .sidebar-metric {
        background-color: rgba(255,255,255,0.05);
        border-radius: 0.5rem;
        padding: 0.75rem;
        margin: 0.5rem 0;
        border: 1px solid rgba(255,255,255,0.1);
    }

    .sidebar-section {
        padding: 0.5rem 1rem 1rem 1rem;
        margin-bottom: 0.5rem;
    }

    .sidebar-section-title {
        font-weight: 600;
        font-size: 1rem;
        margin-bottom: 0.75rem;
        color: rgba(255,255,255,0.8);
        display: flex;
        align-items: center;
    }

    .sidebar-section-title svg {
        margin-right: 0.5rem;
    }

    /* Left-aligned title styling */
    .left-aligned-title {
        text-align: left !important;
        display: flex !important;
        align-items: center !important;
        font-size: 2rem !important;
        font-weight: 700 !important;
        margin-bottom: 1rem !important;
        line-height: 2.4rem !important;
    }

    .left-aligned-title span {
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
        line-height: normal !important;
    }

    .left-aligned-title span:first-child {
        margin-right: 12px !important;
    }
</style>
''', unsafe_allow_html=True)

# Kh√¥ng c·∫ßn hi·ªÉn th·ªã logo ri√™ng v√¨ s·∫Ω ƒë∆∞·ª£c th√™m v√†o sidebar

# MARK: - Kh·ªüi t·∫°o phi√™n Spark
@st.cache_resource
def get_spark_session():
    """Kh·ªüi t·∫°o v√† tr·∫£ v·ªÅ m·ªôt phi√™n Spark v·ªõi x·ª≠ l√Ω l·ªói."""
    try:
        spark = (
            SparkSession.builder
            .appName("VNRealEstatePricePrediction")
            .config("spark.driver.memory", "2g")
            .master("local[*]")
            .getOrCreate()
        )
        # Ki·ªÉm tra k·∫øt n·ªëi
        spark.sparkContext.parallelize([1]).collect()
        return spark
    except Exception as e:
        st.warning(f"Kh√¥ng th·ªÉ kh·ªüi t·∫°o Spark: {e}. S·∫Ω s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p d·ª± ph√≤ng.")
        return None

# MARK: - ƒê·ªçc d·ªØ li·ªáu
@st.cache_data
def load_data(file_path=None):
    """ƒê·ªçc d·ªØ li·ªáu b·∫•t ƒë·ªông s·∫£n t·ª´ file CSV."""
    try:
        # X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi ƒë·∫øn file d·ªØ li·ªáu
        if file_path is None:
            # ƒê∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi t·ª´ th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n
            base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
            file_path = os.path.join(base_dir, 'Data', 'Final Data Cleaned.csv')

        # ƒê·ªçc d·ªØ li·ªáu b·∫±ng pandas
        df = pd.read_csv(file_path)
        return df
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc d·ªØ li·ªáu: {e}")
        return pd.DataFrame()

# MARK: - X·ª≠ l√Ω d·ªØ li·ªáu
@st.cache_data
def preprocess_data(data):
    """Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu cho ph√¢n t√≠ch v√† m√¥ h√¨nh h√≥a."""
    # T·∫°o b·∫£n sao ƒë·ªÉ tr√°nh c·∫£nh b√°o c·ªßa Pandas
    df = data.copy()

    # ƒê·ªïi t√™n c·ªôt ƒë·ªÉ d·ªÖ s·ª≠ d·ª•ng (n·∫øu ch∆∞a c√≥)
    column_mapping = {
        'area (m2)': 'area_m2',
        'street (m)': 'street_width_m'
    }

    # ƒê·∫£m b·∫£o ch√∫ng ta c√≥ c·∫£ c√°c c·ªôt c≈© v√† m·ªõi
    for old_name, new_name in column_mapping.items():
        if old_name in df.columns:
            # N·∫øu c·ªôt c≈© t·ªìn t·∫°i, t·∫°o c·ªôt m·ªõi d·ª±a tr√™n n√≥
            df[new_name] = df[old_name]
        elif new_name not in df.columns and old_name not in df.columns:
            # N·∫øu c·∫£ hai c·ªôt ƒë·ªÅu kh√¥ng t·ªìn t·∫°i, hi·ªÉn th·ªã l·ªói
            st.error(f"Kh√¥ng t√¨m th·∫•y c·ªôt {old_name} ho·∫∑c {new_name} trong d·ªØ li·ªáu")

    # X·ª≠ l√Ω gi√° tr·ªã thi·∫øu
    numeric_cols = ["area (m2)", "bedroom_num", "floor_num", "toilet_num", "livingroom_num", "street (m)"]
    for col in numeric_cols:
        if col in df:
            # Thay th·∫ø -1 (gi√° tr·ªã thi·∫øu) b·∫±ng gi√° tr·ªã trung v·ªã
            median_val = df[df[col] != -1][col].median()
            df[col] = df[col].replace(-1, median_val)

    # Chuy·ªÉn ƒë·ªïi logarithm cho gi√°
    df['price_log'] = np.log1p(df['price_per_m2'])

    return df

# MARK: - Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu pandas sang spark
@st.cache_resource
def convert_to_spark(data):
    """Chuy·ªÉn ƒë·ªïi DataFrame pandas sang DataFrame Spark."""
    spark = get_spark_session()
    return spark.createDataFrame(data)

# MARK: - Hu·∫•n luy·ªán m√¥ h√¨nh
@st.cache_resource
def train_model(data):
    """Hu·∫•n luy·ªán m√¥ h√¨nh d·ª± ƒëo√°n gi√° b·∫•t ƒë·ªông s·∫£n."""
    # Kh·ªüi t·∫°o SparkSession
    spark = get_spark_session()

    # For debugging - commented out
    # print(f"C√°c c·ªôt trong d·ªØ li·ªáu g·ªëc tr∆∞·ªõc khi chuy·ªÉn ƒë·ªïi: {data.columns.tolist()}")

    # ƒê·∫£m b·∫£o d·ªØ li·ªáu c√≥ t·∫•t c·∫£ c√°c c·ªôt c·∫ßn thi·∫øt (c·∫£ t√™n c≈© v√† m·ªõi)
    if 'area (m2)' in data.columns and 'area_m2' not in data.columns:
        data['area_m2'] = data['area (m2)'].copy()
    if 'street (m)' in data.columns and 'street_width_m' not in data.columns:
        data['street_width_m'] = data['street (m)'].copy()

    # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu pandas sang Spark
    data_spark = convert_to_spark(data)

    # ƒê·ªãnh nghƒ©a c√°c c·ªôt ƒë·ªÉ s·ª≠ d·ª•ng trong m√¥ h√¨nh
    # S·ª≠ d·ª•ng t√™n c·ªôt c·ªë ƒë·ªãnh d·ª±a tr√™n bi·∫øn FEATURE_COLUMNS
    area_column = FEATURE_COLUMNS['area']  # 'area (m2)'
    street_column = FEATURE_COLUMNS['street']  # 'street (m)'

    # ƒê·∫∑c tr∆∞ng s·ªë
    numeric_features = [area_column, "bedroom_num", "floor_num", "toilet_num", "livingroom_num", street_column]

    # Ch·ªâ s·ª≠ d·ª•ng c√°c c·ªôt t·ªìn t·∫°i trong d·ªØ li·ªáu
    numeric_features = [col for col in numeric_features if col in data_spark.columns]

    # ƒê·∫∑c tr∆∞ng ph√¢n lo·∫°i
    categorical_features = ["category", "direction", "liability", "district", "city_province"]

    # Lo·∫°i tr·ª´ c√°c ƒë·∫∑c tr∆∞ng kh√¥ng t·ªìn t·∫°i trong d·ªØ li·ªáu
    categorical_features = [col for col in categorical_features if col in data.columns]

    # T·∫°o onehot encoding cho c√°c bi·∫øn ph√¢n lo·∫°i
    from pyspark.ml.feature import StringIndexer, OneHotEncoder

    indexers = [StringIndexer(inputCol=col, outputCol=col+"_index", handleInvalid="keep")
                for col in categorical_features]

    encoders = [OneHotEncoder(inputCol=col+"_index", outputCol=col+"_encoded")
                for col in categorical_features]

    # G·ªôp t·∫•t c·∫£ c√°c ƒë·∫∑c tr∆∞ng ƒë√£ x·ª≠ l√Ω v√†o m·ªôt vector
    assembler_inputs = numeric_features + [col+"_encoded" for col in categorical_features]

    assembler = VectorAssembler(inputCols=assembler_inputs, outputCol="features", handleInvalid="skip")

    # T·∫°o chu·∫©n h√≥a d·ªØ li·ªáu
    scaler = StandardScaler(inputCol="features", outputCol="scaled_features")

    # Kh·ªüi t·∫°o m√¥ h√¨nh GBT
    gbt = GBTRegressor(featuresCol="scaled_features", labelCol="price_per_m2", maxIter=10)

    # T·∫°o pipeline
    pipeline = Pipeline(stages=indexers + encoders + [assembler, scaler, gbt])

    try:
        # Chia d·ªØ li·ªáu th√†nh t·∫≠p hu·∫•n luy·ªán v√† ki·ªÉm tra
        train_data, test_data = data_spark.randomSplit([0.8, 0.2], seed=42)

        # Hu·∫•n luy·ªán m√¥ h√¨nh
        model = pipeline.fit(train_data)

        # ƒê√°nh gi√° m√¥ h√¨nh
        predictions = model.transform(test_data)

        # T√≠nh to√°n c√°c ch·ªâ s·ªë ƒë√°nh gi√°
        evaluator = RegressionEvaluator(labelCol="price_per_m2", predictionCol="prediction", metricName="rmse")
        rmse = evaluator.evaluate(predictions)

        evaluator.setMetricName("r2")
        r2 = evaluator.evaluate(predictions)

        # Hi·ªÉn th·ªã k·∫øt qu·∫£ ƒë√°nh gi√°
        st.session_state.model_metrics = {
            "rmse": rmse,
            "r2": r2
        }

        return model
    except Exception as e:
        st.error(f"L·ªói khi hu·∫•n luy·ªán m√¥ h√¨nh: {e}")
        raise e

# MARK: - D·ª± ƒëo√°n gi√° d·ª±a tr√™n gi√° trung b√¨nh (d·ª± ph√≤ng)
def predict_price_fallback(input_data, data):
    """Ph∆∞∆°ng ph√°p d·ª± ph√≤ng cho vi·ªác d·ª± ƒëo√°n gi√° khi Spark kh√¥ng kh·∫£ d·ª•ng."""
    try:
        # L·ªçc d·ªØ li·ªáu d·ª±a tr√™n v·ªã tr√≠ (t·ªânh/th√†nh ph·ªë v√† qu·∫≠n/huy·ªán)
        city = input_data.get("city_province")
        district = input_data.get("district")
        category = input_data.get("category")
        area = input_data.get("area (m2)")

        # L·ªçc d·ªØ li·ªáu t∆∞∆°ng t·ª±
        similar_properties = data[
            (data["city_province"] == city) &
            (data["district"] == district) &
            (data["category"] == category) &
            (data["area_m2"] > area * 0.7) &
            (data["area_m2"] < area * 1.3)
        ]

        # N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu t∆∞∆°ng t·ª±, m·ªü r·ªông ph·∫°m vi t√¨m ki·∫øm
        if len(similar_properties) < 3:
            similar_properties = data[
                (data["city_province"] == city) &
                (data["district"] == district)
            ]

        # N·∫øu v·∫´n kh√¥ng c√≥, l·∫•y trung b√¨nh to√†n th√†nh ph·ªë
        if len(similar_properties) < 3:
            similar_properties = data[(data["city_province"] == city)]

        # T√≠nh gi√° trung b√¨nh
        if len(similar_properties) > 0:
            avg_price = similar_properties["price_per_m2"].mean()
            return avg_price
        else:
            # M·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu t∆∞∆°ng t·ª±
            return data["price_per_m2"].mean()
    except Exception as e:
        st.error(f"L·ªói khi d·ª± ƒëo√°n gi√° d·ª± ph√≤ng: {e}")
        return 30000000  # Gi√° m·∫∑c ƒë·ªãnh n·∫øu c√≥ l·ªói

# MARK: - D·ª± ƒëo√°n gi√°
def predict_price(model, input_data):
    """D·ª± ƒëo√°n gi√° d·ª±a tr√™n ƒë·∫ßu v√†o c·ªßa ng∆∞·ªùi d√πng."""
    try:
        # ƒê·∫£m b·∫£o session state c√≥ d·ªØ li·ªáu
        if 'data' not in st.session_state:
            st.error("D·ªØ li·ªáu ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o trong session state")
            return 30000000  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu

        # Chuy·ªÉn d·ªØ li·ªáu ƒë·∫ßu v√†o th√†nh DataFrame
        data_copy = {k: [v] for k, v in input_data.items()}

        # T·∫°o pandas DataFrame
        input_df = pd.DataFrame(data_copy)

        # Sao ch√©p d·ªØ li·ªáu ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn d·ªØ li·ªáu g·ªëc
        data_copy = input_df.copy()

        # X·ª≠ l√Ω c√°c gi√° tr·ªã kh√¥ng t·ªìn t·∫°i
        for col in data_copy.columns:
            if col in ["bedroom_num", "floor_num", "toilet_num", "livingroom_num"]:
                data_copy[col] = data_copy[col].fillna(-1).astype(int)

        # ƒê·∫£m b·∫£o ch√∫ng ta c√≥ c√°c c·ªôt ƒë√∫ng t√™n ch√≠nh x√°c
        # ƒê·∫£m b·∫£o kh√¥ng s·ª≠ d·ª•ng area_m2 m√† s·ª≠ d·ª•ng 'area (m2)'
        if 'area_m2' in data_copy.columns and 'area (m2)' not in data_copy.columns:
            data_copy['area (m2)'] = data_copy['area_m2'].copy()
            del data_copy['area_m2']

        # ƒê·∫£m b·∫£o kh√¥ng s·ª≠ d·ª•ng street_width_m m√† s·ª≠ d·ª•ng 'street (m)'
        if 'street_width_m' in data_copy.columns and 'street (m)' not in data_copy.columns:
            data_copy['street (m)'] = data_copy['street_width_m'].copy()
            del data_copy['street_width_m']

        # Ki·ªÉm tra n·∫øu Spark session t·ªìn t·∫°i
        spark = get_spark_session()

        if spark is not None:
            try:
                # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu sang Spark DataFrame
                spark_df = convert_to_spark(data_copy)

                # D·ª± ƒëo√°n gi√°
                predictions = model.transform(spark_df)

                # L·∫•y k·∫øt qu·∫£ d·ª± ƒëo√°n
                prediction_value = predictions.select("prediction").collect()[0][0]
                if prediction_value is not None:
                    return prediction_value
                else:
                    # S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p d·ª± ph√≤ng n·∫øu gi√° tr·ªã d·ª± ƒëo√°n l√† None
                    st.warning("K·∫øt qu·∫£ d·ª± ƒëo√°n kh√¥ng h·ª£p l·ªá, s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p d·ª± ph√≤ng.")
                    if 'data' in st.session_state:
                        return predict_price_fallback(input_data, st.session_state.data)
                    else:
                        return 30000000  # Gi√° m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
            except Exception as e:
                st.warning(f"L·ªói khi d·ª± ƒëo√°n v·ªõi Spark: {e}. S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p d·ª± ph√≤ng.")
                if 'data' in st.session_state:
                    return predict_price_fallback(input_data, st.session_state.data)
                else:
                    return 30000000  # Gi√° m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
        else:
            # S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p d·ª± ph√≤ng n·∫øu kh√¥ng c√≥ Spark
            st.info("S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p d·ª± ph√≤ng ƒë·ªÉ d·ª± ƒëo√°n gi√°.")
            if 'data' in st.session_state:
                return predict_price_fallback(input_data, st.session_state.data)
            else:
                return 30000000  # Gi√° m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
    except Exception as e:
        st.error(f"L·ªói khi chu·∫©n b·ªã d·ªØ li·ªáu: {e}")
        # S·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu t·∫•t c·∫£ c√°c ph∆∞∆°ng ph√°p ƒë·ªÅu th·∫•t b·∫°i
        return 30000000  # Gi√° m·∫∑c ƒë·ªãnh n·∫øu c√≥ l·ªói

# MARK: - K·∫øt n·ªëi Ngrok
def run_ngrok():
    """K·∫øt n·ªëi ·ª©ng d·ª•ng Streamlit v·ªõi ngrok ƒë·ªÉ t·∫°o URL public."""
    # Thi·∫øt l·∫≠p ngrok - Ng∆∞·ªùi d√πng c·∫ßn nh·∫≠p authtoken
    st.sidebar.subheader("K·∫øt n·ªëi Ngrok")

    ngrok_auth_token = st.sidebar.text_input("Nh·∫≠p Ngrok Authtoken", type="password")

    if ngrok_auth_token:
        try:
            # Thi·∫øt l·∫≠p authtoken
            ngrok.set_auth_token(ngrok_auth_token)

            # T·∫°o tunnel HTTP ƒë·∫øn c·ªïng 8501 (c·ªïng m·∫∑c ƒë·ªãnh c·ªßa Streamlit)
            public_url = ngrok.connect(addr="8501", proto="http").public_url

            st.sidebar.success("‚úÖ Ngrok ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng!")
            st.sidebar.markdown(f"**URL public:** {public_url}")
            st.sidebar.markdown("Chia s·∫ª URL n√†y ƒë·ªÉ ng∆∞·ªùi kh√°c c√≥ th·ªÉ truy c·∫≠p ·ª©ng d·ª•ng c·ªßa b·∫°n.")

            # L∆∞u URL v√†o session_state ƒë·ªÉ gi·ªØ gi√° tr·ªã gi·ªØa c√°c l·∫ßn ch·∫°y l·∫°i ·ª©ng d·ª•ng
            st.session_state["ngrok_url"] = public_url

        except Exception as e:
            st.sidebar.error(f"‚ùå L·ªói khi k·∫øt n·ªëi Ngrok: {e}")
    else:
        st.sidebar.info("‚ÑπÔ∏è Nh·∫≠p Ngrok Authtoken ƒë·ªÉ t·∫°o URL public. B·∫°n c√≥ th·ªÉ l·∫•y token mi·ªÖn ph√≠ t·∫°i [ngrok.com](https://ngrok.com).")

# MARK: - Main Application Flow
# T·∫£i d·ªØ li·ªáu
data = load_data()

# L∆∞u d·ªØ li·ªáu v√†o session state ƒë·ªÉ s·ª≠ d·ª•ng trong c√°c h√†m d·ª± ƒëo√°n
if 'data' not in st.session_state:
    st.session_state.data = data

# Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu
if not data.empty:
    processed_data = preprocess_data(data)

    # Hu·∫•n luy·ªán m√¥ h√¨nh
    with st.spinner("ƒêang hu·∫•n luy·ªán m√¥ h√¨nh d·ª± ƒëo√°n gi√°..."):
        model = train_model(processed_data)
        # L·∫•y c√°c metric t·ª´ session state sau khi hu·∫•n luy·ªán m√¥ h√¨nh
        if 'model_metrics' in st.session_state:
            r2_score = st.session_state.model_metrics['r2']
            rmse = st.session_state.model_metrics['rmse']
        else:
            r2_score = 0.0
            rmse = 0.0

    # N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, hi·ªÉn th·ªã th√¥ng b√°o
else:
    st.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra ƒë∆∞·ªùng d·∫´n ƒë·∫øn file d·ªØ li·ªáu.")
    st.stop()

# MARK: - Sidebar
# T·∫°o container ƒë·ªÉ ·∫©n padding m·∫∑c ƒë·ªãnh c·ªßa sidebar
st.sidebar.markdown("""
<style>
    [data-testid="stSidebarUserContent"] > div:first-child {padding-top: 0rem;}
    [data-testid="stVerticalBlock"] {gap: 0.5rem;}
</style>
""", unsafe_allow_html=True)

# Header c·ªßa sidebar v·ªõi logo
st.sidebar.markdown("""
<div class="sidebar-header">
    <img src="https://img.icons8.com/fluency/96/000000/home.png" alt="Logo">
    <h2 style="color: white; margin: 0; font-size: 1.3rem;">BƒêS Vi·ªát Nam</h2>
    <p style="color: rgba(255,255,255,0.7); margin: 0; font-size: 0.8rem;">AI D·ª± ƒêo√°n Gi√°</p>
</div>
""", unsafe_allow_html=True)

# Set session state for app_mode if it doesn't exist
if 'app_mode' not in st.session_state:
    st.session_state['app_mode'] = "D·ª± ƒëo√°n gi√°"

# Ph∆∞∆°ng th·ª©c ƒë·ªÉ c·∫≠p nh·∫≠t app_mode
def set_app_mode(mode):
    st.session_state['app_mode'] = mode

# CSS cho buttons
st.markdown("""
<style>
    /* Navigation button styling */
    button[kind="secondary"], button[kind="primary"] {
        width: 100% !important;
        text-align: left !important;
        display: flex !important;
        align-items: center !important;
        justify-content: flex-start !important;
        padding: 0.6rem 0.5rem !important;
        margin: 0.25rem 0 !important;
        border-radius: 0.5rem !important;
    }

    button[kind="secondary"] p, button[kind="primary"] p {
        width: 100% !important;
        text-align: left !important;
        margin: 0 !important;
        padding: 0 !important;
    }

    .sidebar-nav-button {
        width: 100%;
        display: flex !important;
        align-items: center !important;
        justify-content: flex-start !important;
        text-align: left !important;
        padding: 0.6rem 0.5rem !important;
        margin: 0.25rem 0 !important;
        border-radius: 0.5rem !important;
        color: white !important;
        background-color: rgba(44, 52, 75, 0.5) !important;
        border: none !important;
        cursor: pointer;
        transition: all 0.2s;
        font-size: 0.95rem !important;
        line-height: 1.2;
    }

    .sidebar-nav-button:hover {
        background-color: rgba(76, 154, 255, 0.7) !important;
    }

    .sidebar-nav-button-active {
        background-color: #4c9aff !important;
        color: white !important;
        font-weight: 500 !important;
    }
</style>
""", unsafe_allow_html=True)

# L·∫•y mode hi·ªán t·∫°i
app_mode = st.session_state['app_mode']

# Menu options v·ªõi icons v√† kho·∫£ng c√°ch
modes = ["D·ª± ƒëo√°n gi√°", "Ph√¢n t√≠ch d·ªØ li·ªáu", "V·ªÅ d·ª± √°n"]
modes_icons = ["üè†‚ÄÅ", "üìä‚ÄÅ", "‚ÑπÔ∏è‚ÄÅ"]

# T·∫°o CSS ƒë·ªÉ ƒëi·ªÅu ch·ªânh style cho n√∫t button trong Streamlit
st.markdown("""
<style>
    button[kind="primary"], button[kind="secondary"] {
        padding-left: 16px !important;
        padding-right: 6px !important;
    }

    button[kind="primary"] p:first-child, button[kind="secondary"] p:first-child {
        display: inline-block;
        margin-right: 8px !important;
        font-size: 1.2rem !important;
    }

    button[kind="primary"] p:last-child, button[kind="secondary"] p:last-child {
        font-size: 0.95rem !important;
        font-weight: 500;
    }
</style>
""", unsafe_allow_html=True)

# Container cho menu
menu_container = st.sidebar.container()

# T·∫°o c√°c button
for i, mode in enumerate(modes):
    active_class = "sidebar-nav-button-active" if mode == app_mode else ""
    # S·ª≠ d·ª•ng nhi·ªÅu kho·∫£ng tr·∫Øng h∆°n ƒë·ªÉ t·∫°o kho·∫£ng c√°ch
    button_label = f"{modes_icons[i]}        {mode}"

    if menu_container.button(button_label, key=f"nav_{i}",
                           use_container_width=True,
                           on_click=set_app_mode,
                           args=(mode,),
                           type="primary" if mode == app_mode else "secondary"):
        pass

    # T·∫°o style cho n√∫t
    if i < len(modes) - 1:
        # ƒê·ªãnh nghƒ©a CSS ch√≠nh x√°c h∆°n ƒë·ªÉ nh·∫Øm ƒë·∫øn c√°c th√†nh ph·∫ßn trong n√∫t
        st.markdown("""
        <style>
        div[data-testid="stVerticalBlock"] > div:nth-child(CHILD_INDEX) button {
            width: 100% !important;
            text-align: left !important;
            padding: 0.6rem 0.5rem !important;
            margin: 0.25rem 0 !important;
            border-radius: 0.5rem !important;
            font-size: 0.95rem !important;
        }

        /* Nh·∫Øm tr·ª±c ti·∫øp v√†o th√†nh ph·∫ßn ch·ª©a vƒÉn b·∫£n trong n√∫t */
        div[data-testid="stVerticalBlock"] > div:nth-child(CHILD_INDEX) button > div:first-child {
            display: flex !important;
            justify-content: flex-start !important;
            width: 100% !important;
        }

        /* Nh·∫Øm tr·ª±c ti·∫øp v√†o th√†nh ph·∫ßn ch·ª©a vƒÉn b·∫£n */
        div[data-testid="stVerticalBlock"] > div:nth-child(CHILD_INDEX) button > div:first-child > p {
            text-align: left !important;
            width: 100% !important;
            margin-left: 0 !important;
            margin-right: 0 !important;
        }
        </style>
        """.replace("CHILD_INDEX", str(i + 1 + 6)), unsafe_allow_html=True)  # +6 v√¨ c√≥ c√°c ƒë·ªëi t∆∞·ª£ng kh√°c tr∆∞·ªõc menu

# Th√™m CSS ƒë·ªÉ n√¢ng cao giao di·ªán c√°c metrics
st.markdown("""
<style>
    /* Style cho card metrics m·ªõi */
    .enhanced-metric-card {
        background: linear-gradient(145deg, rgba(44,82,130,0.5), rgba(26,54,93,0.7));
        border-radius: 10px;
        padding: 0.75rem;
        margin: 0.5rem 0;
        border: 1px solid rgba(76,154,255,0.3);
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
        height: 110px; /* ƒê·∫∑t chi·ªÅu cao c·ªë ƒë·ªãnh cho card */
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .enhanced-metric-card:hover {
        border: 1px solid rgba(76,154,255,0.6);
        transform: translateY(-2px);
        box-shadow: 0 6px 8px rgba(0,0,0,0.15);
    }

    .metric-header {
        display: flex;
        align-items: center;
        margin-bottom: 0.5rem;
        border-bottom: 1px solid rgba(255,255,255,0.1);
        padding-bottom: 0.4rem;
    }

    .metric-icon {
        margin-right: 0.5rem;
        background-color: rgba(76,154,255,0.2);
        border-radius: 50%;
        padding: 0.2rem;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .metric-title {
        font-size: 0.85rem;
        font-weight: 600;
        color: rgba(255,255,255,0.9);
    }

    .metric-value {
        font-size: 1.5rem;
        font-weight: 700;
        color: #4c9aff;
        text-align: center;
        margin-top: 0.2rem;
    }

    .metric-description {
        font-size: 0.7rem;
        color: rgba(255,255,255,0.6);
        text-align: center;
        margin-top: 0.2rem;
    }

    .model-stats-container {
        margin: 0.3rem 0;
        padding: 0.3rem;
    }
</style>
""", unsafe_allow_html=True)

# Hi·ªÉn th·ªã th√¥ng tin m√¥ h√¨nh trong nh√≥m
st.sidebar.markdown('<div class="model-stats-container"><div class="metric-header"><div class="metric-icon"><svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M21 16V8.00002C20.9996 7.6493 20.9071 7.30483 20.7315 7.00119C20.556 6.69754 20.3037 6.44539 20 6.27002L13 2.27002C12.696 2.09449 12.3511 2.00208 12 2.00208C11.6489 2.00208 11.304 2.09449 11 2.27002L4 6.27002C3.69626 6.44539 3.44398 6.69754 3.26846 7.00119C3.09294 7.30483 3.00036 7.6493 3 8.00002V16C3.00036 16.3508 3.09294 16.6952 3.26846 16.9989C3.44398 17.3025 3.69626 17.5547 4 17.73L11 21.73C11.304 21.9056 11.6489 21.998 12 21.998C12.3511 21.998 12.696 21.9056 13 21.73L20 17.73C20.3037 17.5547 20.556 17.3025 20.7315 16.9989C20.9071 16.6952 20.9996 16.3508 21 16Z" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg></div><span class="metric-title">Th√¥ng s·ªë m√¥ h√¨nh</span></div>', unsafe_allow_html=True)

# Metrics ƒë·ªô ch√≠nh x√°c
st.sidebar.markdown("""
<div class="enhanced-metric-card" style="background: linear-gradient(145deg, rgba(51,97,255,0.3), rgba(29,55,147,0.5));
                           border-color: rgba(100,149,237,0.3); padding: 10px; margin: 5px 0;">
    <div class="metric-header" style="display:flex; align-items:center;">
        <div class="metric-icon" style="background-color: rgba(100,149,237,0.2); margin-right:8px; padding:5px; border-radius:6px;">
            <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M12 2L2 7L12 12L22 7L12 2Z" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M2 17L12 22L22 17" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M2 12L12 17L22 12" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
        </div>
        <span class="metric-title">R¬≤ Score</span>
    </div>
    <div class="metric-value" style="color: #84a9ff; font-size: 1.5rem; text-align:center; margin:5px 0;">{r2_score:.4f}</div>
</div>
""".format(r2_score=r2_score), unsafe_allow_html=True)

# Th√™m kho·∫£ng c√°ch gi·ªØa hai card th√¥ng s·ªë m√¥ h√¨nh
st.sidebar.markdown("<div style='height: 24px;'></div>", unsafe_allow_html=True)

# Metrics ƒë·ªô l·ªách chu·∫©n - RMSE
st.sidebar.markdown("""
<div class="enhanced-metric-card" style="background: linear-gradient(145deg, rgba(139,92,246,0.3), rgba(76,29,149,0.5));
                           border-color: rgba(167,139,250,0.3); padding: 10px; margin: 5px 0;">
    <div class="metric-header" style="display:flex; align-items:center;">
        <div class="metric-icon" style="background-color: rgba(167,139,250,0.2); margin-right:8px; padding:5px; border-radius:6px;">
            <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M3 9L12 2L21 9V20C21 20.5304 20.7893 21.0391 20.4142 21.4142C20.0391 21.7893 19.5304 22 19 22H5C4.46957 22 3.96086 21.7893 3.58579 21.4142C3.21071 21.0391 3 20.5304 3 20V9Z" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M9 22V12H15V22" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
        </div>
        <span class="metric-title">RMSE</span>
    </div>
    <div class="metric-value" style="color: #c4b5fd; font-size: 1.5rem; text-align:center; margin:5px 0;">{rmse:.4f}</div>
</div>
""".format(rmse=rmse), unsafe_allow_html=True)

# Th√™m kho·∫£ng c√°ch gi·ªØa c√°c card metric v√† s·ªë l∆∞·ª£ng d·ªØ li·ªáu
st.sidebar.markdown("<div style='height: 20px;'></div>", unsafe_allow_html=True)

# C√°c th·ªëng k√™ d·ªØ li·ªáu - hi·ªÉn th·ªã ri√™ng t·ª´ng d√≤ng
st.sidebar.markdown('<div class="model-stats-container"><div class="metric-header"><div class="metric-icon"><svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M21 16V8.00002C20.9996 7.6493 20.9071 7.30483 20.7315 7.00119C20.556 6.69754 20.3037 6.44539 20 6.27002L13 2.27002C12.696 2.09449 12.3511 2.00208 12 2.00208C11.6489 2.00208 11.304 2.09449 11 2.27002L4 6.27002C3.69626 6.44539 3.44398 6.69754 3.26846 7.00119C3.09294 7.30483 3.00036 7.6493 3 8.00002V16C3.00036 16.3508 3.09294 16.6952 3.26846 16.9989C3.44398 17.3025 3.69626 17.5547 4 17.73L11 21.73C11.304 21.9056 11.6489 21.998 12 21.998C12.3511 21.998 12.696 21.9056 13 21.73L20 17.73C20.3037 17.5547 20.556 17.3025 20.7315 16.9989C20.9071 16.6952 20.9996 16.3508 21 16Z" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg></div><span class="metric-title">Th·ªëng k√™ d·ªØ li·ªáu</span></div>', unsafe_allow_html=True)

# S·ªë l∆∞·ª£ng b·∫•t ƒë·ªông s·∫£n
st.sidebar.markdown("""
<div class="enhanced-metric-card" style="background: linear-gradient(145deg, rgba(44,130,96,0.5), rgba(26,93,59,0.7));
                           border-color: rgba(76,255,154,0.3); padding: 10px; margin: 5px 0;">
    <div class="metric-header" style="display:flex; align-items:center;">
        <div class="metric-icon" style="background-color: rgba(76,255,154,0.2); margin-right:8px; padding:5px; border-radius:6px;">
            <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M3 3V21H21" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M19 5L9 15L6 12" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
        </div>
        <span class="metric-title">S·ªë l∆∞·ª£ng b·∫•t ƒë·ªông s·∫£n</span>
    </div>
    <div class="metric-value" style="color: #4dff9e; font-size: 1.8rem; text-align:center; margin:5px 0;">{data_count:,}</div>
</div>
""".format(data_count=len(data)), unsafe_allow_html=True)

# Footer c·ªßa sidebar
st.sidebar.markdown("<hr style='margin: 1.5rem 0; opacity: 0.2'>", unsafe_allow_html=True)
st.sidebar.markdown("<div style='padding: 0 1rem; color: rgba(255,255,255,0.7); font-size: 0.8rem;'>", unsafe_allow_html=True)
st.sidebar.markdown("""
<div style="display: flex; align-items: center; margin-bottom: 0.5rem;">
    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="margin-right: 0.5rem">
        <path d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        <path d="M12 16V12" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        <path d="M12 8H12.01" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
    </svg>
    <span>D·ª± ƒëo√°n gi√° BƒêS Vi·ªát Nam</span>
</div>

<div style="display: flex; align-items: center;">
    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="margin-right: 0.5rem">
        <path d="M21 10C21 17 12 23 12 23C12 23 3 17 3 10C3 7.61305 3.94821 5.32387 5.63604 3.63604C7.32387 1.94821 9.61305 1 12 1C14.3869 1 16.6761 1.94821 18.364 3.63604C20.0518 5.32387 21 7.61305 21 10Z" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        <path d="M12 13C13.6569 13 15 11.6569 15 10C15 8.34315 13.6569 7 12 7C10.3431 7 9 8.34315 9 10C9 11.6569 10.3431 13 12 13Z" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
    </svg>
    <span>Ngu·ªìn: nhadat.cafeland.vn</span>
</div>

<div style="display: flex; align-items: center; margin-top: 0.5rem;">
    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="margin-right: 0.5rem">
        <path d="M17 21V19C17 17.9391 16.5786 16.9217 15.8284 16.1716C15.0783 15.4214 14.0609 15 13 15H5C3.93913 15 2.92172 15.4214 2.17157 16.1716C1.42143 16.9217 1 17.9391 1 19V21" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        <path d="M9 11C11.2091 11 13 9.20914 13 7C13 4.79086 11.2091 3 9 3C6.79086 3 5 4.79086 5 7C5 9.20914 6.79086 11 9 11Z" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        <path d="M23 21V19C22.9993 18.1137 22.7044 17.2528 22.1614 16.5523C21.6184 15.8519 20.8581 15.3516 20 15.13" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        <path d="M16 3.13C16.8604 3.35031 17.623 3.85071 18.1676 4.55232C18.7122 5.25392 19.0078 6.11683 19.0078 7.005C19.0078 7.89318 18.7122 8.75608 18.1676 9.45769C17.623 10.1593 16.8604 10.6597 16 10.88" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
    </svg>
    <span>Nh√≥m 5</span>
</div>
""", unsafe_allow_html=True)
st.sidebar.markdown("</div>", unsafe_allow_html=True)

# MARK: - Ch·∫ø ƒë·ªô D·ª± ƒëo√°n gi√°
if app_mode == "D·ª± ƒëo√°n gi√°":
   # CSS th√™m cho ti√™u ƒë·ªÅ trang
    st.markdown("""
    <style>
    .modern-header {
        background: linear-gradient(to right, rgba(30, 30, 30, 0.9), rgba(45, 45, 45, 0.8));
        border-radius: 12px;
        padding: 20px 25px;
        margin-bottom: 25px;
        border-left: 4px solid #4c9aff;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
    }

    .header-title {
        display: flex;
        align-items: center;
        margin-bottom: 15px;
    }

    .header-icon {
        background-color: rgba(255, 255, 255, 0.08);
        padding: 10px;
        border-radius: 10px;
        margin-right: 15px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .header-icon svg {
        width: 26px;
        height: 26px;
        stroke: #ffffff;
        fill: none;
        stroke-width: 1.5;
    }

    .header-text {
        font-size: 1.8rem;
        font-weight: 700;
        color: #ffffff;
        line-height: 1.3;
    }

    .header-desc {
        display: flex;
        align-items: center;
        color: #cccccc;
        font-size: 1rem;
        line-height: 1.5;
        margin-left: 60px;
        position: relative;
    }

    .header-desc:before {
        content: '';
        position: absolute;
        width: 3px;
        height: 100%;
        background-color: rgba(76, 154, 255, 0.5);
        left: -15px;
        border-radius: 8px;
    }
    </style>
    """, unsafe_allow_html=True)

    # Ti√™u ƒë·ªÅ trang v·ªõi giao di·ªán hi·ªán ƒë·∫°i h∆°n
    st.markdown("""
    <div class="modern-header">
        <div class="header-title">
            <div class="header-icon">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                    <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                    <polyline points="9 22 9 12 15 12 15 22"></polyline>
                </svg>
            </div>
            <div class="header-text">D·ª± ƒëo√°n gi√° b·∫•t ƒë·ªông s·∫£n Vi·ªát Nam</div>
        </div>
        <div class="header-desc">
            H√£y nh·∫≠p th√¥ng tin v·ªÅ b·∫•t ƒë·ªông s·∫£n m√† b·∫°n quan t√¢m v√† ch√∫ng t√¥i s·∫Ω d·ª± ƒëo√°n gi√° tr·ªã th·ªã tr∆∞·ªùng d·ª±a tr√™n m√¥ h√¨nh h·ªçc m√°y ti√™n ti·∫øn c·ªßa ch√∫ng t√¥i.
        </div>
    </div>
    """, unsafe_allow_html=True)

    # T·∫°o style cho card
    st.markdown("""
    <style>
    .input-card {
        background-color: #1e1e1e;
        border-radius: 10px;
        border: 1px solid #333;
        padding: 10px;
        margin-bottom: 15px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        transition: all 0.3s ease;
    }

    .input-card:hover {
        box-shadow: 0 4px 8px rgba(0,0,0,0.3);
        border-color: #444;
    }

    .card-header {
        display: flex;
        align-items: center;
        justify-content: center;
        padding-bottom: 0;
    }

    .card-header .icon {
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: rgba(139, 92, 246, 0.1);
        width: 26px;
        height: 26px;
        border-radius: 6px;
        margin-right: 8px;
    }

    .card-header .icon svg {
        width: 16px;
        height: 16px;
        stroke: #ffffff;
        fill: none;
        stroke-width: 2;
        stroke-linecap: round;
        stroke-linejoin: round;
    }

    .card-header .title {
        color: #f0f0f0;
        font-size: 1rem;
        font-weight: 600;
    }

    .stSelectbox label, .stNumberInput label {
        font-weight: 500;
        color: #ccc !important;
    }
    </style>
    """, unsafe_allow_html=True)

    # T·∫°o layout v·ªõi 2 c·ªôt
    col1, col2 = st.columns([1, 1])

    with col1:
        # Card v·ªã tr√≠
        st.markdown("""
        <div class="input-card">
            <div class="card-header">
                <div class="icon">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                        <path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"></path>
                        <circle cx="12" cy="10" r="3"></circle>
                    </svg>
                </div>
                <div class="title">V·ªã tr√≠</div>
            </div>
        """, unsafe_allow_html=True)

        # Ch·ªçn t·ªânh/th√†nh ph·ªë
        city_options = sorted(data["city_province"].unique())
        city = st.selectbox("T·ªânh/Th√†nh ph·ªë", city_options, key='city')

        # L·ªçc qu·∫≠n/huy·ªán d·ª±a tr√™n t·ªânh/th√†nh ph·ªë ƒë√£ ch·ªçn
        district_options = sorted(data[data["city_province"] == city]["district"].unique())
        district = st.selectbox("Qu·∫≠n/Huy·ªán", district_options, key='district')

        st.markdown('</div>', unsafe_allow_html=True)

        # Card th√¥ng tin c∆° b·∫£n
        st.markdown("""
        <div class="input-card">
            <div class="card-header">
                <div class="icon">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                        <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                        <polyline points="9 22 9 12 15 12 15 22"></polyline>
                    </svg>
                </div>
                <div class="title">Th√¥ng tin c∆° b·∫£n</div>
            </div>
        """, unsafe_allow_html=True)

        # M·ªôt h√†ng 2 c·ªôt cho th√¥ng tin c∆° b·∫£n
        bc1, bc2 = st.columns(2)
        with bc1:
            area = st.number_input("Di·ªán t√≠ch (m¬≤)", min_value=10.0, max_value=1000.0, value=80.0, step=10.0, key='area')
        with bc2:
            category_options = sorted(data["category"].unique())
            category = st.selectbox("Lo·∫°i BƒêS", category_options, key='category')

        # H√†ng ti·∫øp theo
        bc3, bc4 = st.columns(2)
        with bc3:
            direction_options = sorted(data["direction"].unique())
            direction = st.selectbox("H∆∞·ªõng nh√†", direction_options, key='direction')
        with bc4:
            liability_options = sorted(data["liability"].unique())
            liability = st.selectbox("T√¨nh tr·∫°ng ph√°p l√Ω", liability_options, key='liability')

        st.markdown('</div>', unsafe_allow_html=True)

    with col2:
        # Card th√¥ng tin ph√≤ng ·ªëc
        st.markdown("""
        <div class="input-card">
            <div class="card-header">
                <div class="icon">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                        <path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9l-7-7z"></path>
                        <polyline points="13 2 13 9 20 9"></polyline>
                    </svg>
                </div>
                <div class="title">Th√¥ng tin ph√≤ng ·ªëc</div>
            </div>
        """, unsafe_allow_html=True)

        # H√†ng 1
        rc1, rc2 = st.columns(2)
        with rc1:
            bedroom_num = st.number_input("S·ªë ph√≤ng ng·ªß", min_value=0, max_value=10, value=2, step=1, key='bedroom')
        with rc2:
            toilet_num = st.number_input("S·ªë ph√≤ng v·ªá sinh", min_value=0, max_value=10, value=2, step=1, key='toilet')

        # H√†ng 2
        rc3, rc4 = st.columns(2)
        with rc3:
            livingroom_num = st.number_input("S·ªë ph√≤ng kh√°ch", min_value=0, max_value=10, value=1, step=1, key='livingroom')
        with rc4:
            floor_num = st.number_input("S·ªë t·∫ßng", min_value=0, max_value=50, value=2, step=1, key='floor')

        st.markdown('</div>', unsafe_allow_html=True)

        # Card th√¥ng tin khu v·ª±c
        st.markdown("""
        <div class="input-card">
            <div class="card-header">
                <div class="icon">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                        <circle cx="12" cy="12" r="10"></circle>
                        <line x1="2" y1="12" x2="22" y2="12"></line>
                        <line x1="12" y1="2" x2="12" y2="22"></line>
                    </svg>
                </div>
                <div class="title">Th√¥ng tin khu v·ª±c</div>
            </div>
        """, unsafe_allow_html=True)

        # Th√¥ng tin chi·ªÅu r·ªông ƒë∆∞·ªùng
        street_width = st.number_input("Chi·ªÅu r·ªông ƒë∆∞·ªùng (m)",
                                      min_value=0.0, max_value=50.0, value=8.0, step=0.5, key='street')

        st.markdown('</div>', unsafe_allow_html=True)

    # S·ª≠ d·ª•ng c√°ch ti·∫øp c·∫≠n kh√°c cho n√∫t d·ª± ƒëo√°n
    st.markdown('<div style="padding: 10px 0 20px 0;"></div>', unsafe_allow_html=True)

    # C·∫£i thi·ªán CSS cho m·ªçi lo·∫°i n√∫t
    st.markdown('''
    <style>
    /* Targeting all buttons with tertiary style */
    .stButton > button[kind="tertiary"], div[data-testid="StyledFullScreenButton"] button[kind="tertiary"], div button[kind="tertiary"] {
        background-color: #1a202c !important;
        color: #f0f0f0 !important;
        border: 1px solid #2d3748 !important;
        padding: 12px 20px !important;
        margin: 8px 0 !important;
        border-radius: 6px !important;
        font-weight: 500 !important;
        font-size: 16px !important;
        text-align: center !important;
        transition: all 0.2s ease !important;
        width: 100% !important;
    }

    /* Hover state for all tertiary buttons */
    .stButton > button[kind="tertiary"]:hover, div button[kind="tertiary"]:hover {
        background-color: #2d3748 !important;
        border-color: #4a5568 !important;
        transform: translateY(-2px) !important;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15) !important;
    }

    /* Active/focus state */
    .stButton > button[kind="tertiary"]:active, div button[kind="tertiary"]:active,
    .stButton > button[kind="tertiary"]:focus, div button[kind="tertiary"]:focus {
        transform: translateY(0) !important;
        background-color: #2d3748 !important;
        box-shadow: none !important;
        outline: none !important;
    }
    </style>
    ''', unsafe_allow_html=True)

    # C·∫£i thi·ªán h∆°n n·ªØa v·ªõi container ƒë∆∞·ª£c thi·∫øt k·∫ø ri√™ng
    st.markdown('<div class="prediction-button-wrapper"></div>', unsafe_allow_html=True)

    # N√∫t d·ª± ƒëo√°n
    if st.button("D·ª± ƒëo√°n gi√°", use_container_width=True, type="tertiary"):
        # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·∫ßu v√†o
        input_data = {
            "area (m2)": area,
            "bedroom_num": bedroom_num,
            "floor_num": floor_num,
            "toilet_num": toilet_num,
            "livingroom_num": livingroom_num,
            "street (m)": street_width,
            "city_province": city,
            "district": district,
            "category": category,
            "direction": direction,
            "liability": liability,
            # C√°c tr∆∞·ªùng c·∫ßn thi·∫øt cho m√¥ h√¨nh
            "price_per_m2": 0,  # Gi√° tr·ªã n√†y s·∫Ω b·ªã b·ªè qua trong d·ª± ƒëo√°n
            "price_log": 0      # Gi√° tr·ªã n√†y s·∫Ω b·ªã b·ªè qua trong d·ª± ƒëo√°n
        }

        # D·ª± ƒëo√°n gi√°
        with st.spinner("ƒêang d·ª± ƒëo√°n gi√°..."):
            try:
                # Th√™m hi·ªáu ·ª©ng ch·ªù ƒë·ªÉ c·∫£i thi·ªán UX
                progress_bar = st.progress(0)
                for percent_complete in range(0, 101, 20):
                    time.sleep(0.1)  # T·∫°o ƒë·ªô tr·ªÖ gi·∫£ ƒë·ªÉ hi·ªáu ·ª©ng ƒë·∫πp h∆°n
                    progress_bar.progress(percent_complete)
                progress_bar.empty()  # X√≥a thanh ti·∫øn tr√¨nh sau khi ho√†n th√†nh

                # Th·ª±c hi·ªán d·ª± ƒëo√°n
                predicted_price_per_m2 = predict_price(model, input_data)

                # Ki·ªÉm tra k·∫øt qu·∫£ d·ª± ƒëo√°n kh√¥ng ph·∫£i l√† None
                if predicted_price_per_m2 is None:
                    st.error("Kh√¥ng th·ªÉ d·ª± ƒëo√°n gi√°. Vui l√≤ng th·ª≠ l·∫°i sau.")
                else:
                    # T√≠nh to√°n gi√° d·ª± ƒëo√°n
                    # ƒê·∫£m b·∫£o predicted_price_per_m2 l√† gi√° tr·ªã s·ªë nguy√™n
                    predicted_price_per_m2 = int(round(predicted_price_per_m2))
                    total_price = int(round(predicted_price_per_m2 * area))
                    total_price_billion = total_price / 1_000_000_000

                    # H√†m ƒë·ªãnh d·∫°ng gi√° th√¥ng minh theo ƒë∆°n v·ªã
                    def format_price(price):
                        if price >= 1_000_000_000:  # Gi√° >= 1 t·ª∑
                            billions = price // 1_000_000_000
                            remaining = price % 1_000_000_000

                            if remaining == 0:
                                return f"{billions:,.0f} t·ª∑ VND"

                            millions = remaining // 1_000_000
                            if millions == 0:
                                return f"{billions:,.0f} t·ª∑ VND"
                            else:
                                return f"{billions:,.0f} t·ª∑ {millions:,.0f} tri·ªáu VND"
                        elif price >= 1_000_000:  # Gi√° >= 1 tri·ªáu
                            millions = price // 1_000_000
                            remaining = price % 1_000_000

                            if remaining == 0:
                                return f"{millions:,.0f} tri·ªáu VND"

                            thousands = remaining // 1_000
                            if thousands == 0:
                                return f"{millions:,.0f} tri·ªáu VND"
                            else:
                                return f"{millions:,.0f} tri·ªáu {thousands:,.0f} ngh√¨n VND"
                        elif price >= 1_000:  # Gi√° >= 1 ngh√¨n
                            return f"{price//1_000:,.0f} ngh√¨n VND"
                        else:
                            return f"{price:,.0f} VND"

                    # ƒê·ªãnh d·∫°ng gi√° t·ªïng
                    formatted_total_price = format_price(total_price)

                    # CSS cho card hi·ªÉn th·ªã k·∫øt qu·∫£
                    st.markdown('''
                    <style>
                    .result-container {
                        background: linear-gradient(to right, rgba(25, 26, 36, 0.8), rgba(30, 32, 45, 0.9));
                        border-radius: 12px;
                        padding: 0;
                        margin: 15px 0;
                        border: 1px solid rgba(76, 154, 255, 0.2);
                        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
                        overflow: hidden;
                    }

                    .result-header {
                        background: linear-gradient(to right, rgba(76, 154, 255, 0.15), rgba(76, 154, 255, 0.05));
                        padding: 16px 25px;
                        display: flex;
                        align-items: center;
                        border-bottom: 1px solid rgba(76, 154, 255, 0.1);
                    }

                    .result-header-icon {
                        margin-right: 14px;
                        color: #4c9aff;
                        font-size: 24px;
                    }

                    .result-header-text {
                        font-size: 18px;
                        font-weight: 600;
                        color: white;
                    }

                    .result-body {
                        padding: 25px;
                    }

                    .price-grid {
                        display: grid;
                        grid-template-columns: 1fr 1fr;
                        gap: 20px;
                    }

                    .price-card {
                        background-color: rgba(30, 35, 50, 0.8);
                        border-radius: 8px;
                        padding: 18px;
                        display: flex;
                        flex-direction: column;
                        border: 1px solid rgba(255, 255, 255, 0.06);
                    }

                    .price-label {
                        font-size: 14px;
                        color: #a0aec0;
                        margin-bottom: 10px;
                    }

                    .price-value {
                        font-size: 22px;
                        font-weight: bold;
                        color: white;
                        letter-spacing: 0.5px;
                    }

                    .similar-container {
                        margin-top: 30px;
                    }

                    .similar-header {
                        background: linear-gradient(to right, rgba(255, 255, 255, 0.07), rgba(255, 255, 255, 0.03));
                        padding: 16px 25px;
                        display: flex;
                        align-items: center;
                        border-radius: 8px 8px 0 0;
                        border: 1px solid rgba(255, 255, 255, 0.05);
                        border-bottom: none;
                    }

                    .similar-header-icon {
                        margin-right: 14px;
                        color: white;
                        font-size: 20px;
                    }

                    .similar-header-text {
                        font-size: 16px;
                        font-weight: 600;
                        color: white;
                    }

                    .similar-data-wrapper {
                        border: 1px solid rgba(255, 255, 255, 0.05);
                        border-top: none;
                        border-radius: 0 0 8px 8px;
                        overflow: hidden;
                        padding: 5px;
                    }
                    </style>
                    ''', unsafe_allow_html=True)

                    # Hi·ªÉn th·ªã k·∫øt qu·∫£ trong container ƒë·∫πp v·ªõi giao di·ªán hi·ªán ƒë·∫°i
                    st.markdown(f'''
                    <div class="result-container">
                        <div class="result-header">
                            <svg class="result-header-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M5 12H2V20H5V12Z" fill="currentColor"/>
                                <path d="M19 3H16V20H19V3Z" fill="currentColor"/>
                                <path d="M12 7H9V20H12V7Z" fill="currentColor"/>
                            </svg>
                            <div class="result-header-text">K·∫øt qu·∫£ d·ª± ƒëo√°n gi√°</div>
                        </div>
                        <div class="result-body">
                            <div class="price-grid">
                                <div class="price-card">
                                    <div class="price-label">Gi√° d·ª± ƒëo√°n / m¬≤</div>
                                    <div class="price-value">{predicted_price_per_m2:,.0f} VND</div>
                                </div>
                                <div class="price-card">
                                    <div class="price-label">T·ªïng gi√° d·ª± ƒëo√°n</div>
                                    <div class="price-value">{formatted_total_price}</div>
                                </div>
                            </div>
                        </div>
                    </div>
                    ''', unsafe_allow_html=True)

                # Hi·ªÉn th·ªã c√°c b·∫•t ƒë·ªông s·∫£n t∆∞∆°ng t·ª± v·ªõi ui m·ªõi
                similar_properties = data[
                    (data["city_province"] == city) &
                    (data["district"] == district) &
                    (data["area_m2"] > area * 0.7) &
                    (data["area_m2"] < area * 1.3)
                ]

                st.markdown('''
                <div class="similar-container">
                    <div class="similar-header">
                        <svg class="similar-header-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M14 2H6C4.9 2 4.01 2.9 4.01 4L4 20C4 21.1 4.89 22 5.99 22H18C19.1 22 20 21.1 20 20V8L14 2ZM18 20H6V4H13V9H18V20Z" fill="currentColor"/>
                            <path d="M11.5 14.5C11.5 15.33 10.83 16 10 16C9.17 16 8.5 15.33 8.5 14.5C8.5 13.67 9.17 13 10 13C10.83 13 11.5 13.67 11.5 14.5Z" fill="currentColor"/>
                            <path d="M14 14.5C14 13.12 12.88 12 11.5 12H8.5C7.12 12 6 13.12 6 14.5V16H14V14.5Z" fill="currentColor"/>
                        </svg>
                        <div class="similar-header-text">B·∫•t ƒë·ªông s·∫£n t∆∞∆°ng t·ª±</div>
                    </div>
                </div>
                ''', unsafe_allow_html=True)

                st.markdown('<div class="similar-data-wrapper">', unsafe_allow_html=True)
                if len(similar_properties) > 0:
                    similar_df = similar_properties[["area_m2", "price_per_m2", "bedroom_num", "floor_num", "category"]].head(5).reset_index(drop=True)
                    similar_df.columns = ["Di·ªán t√≠ch (m¬≤)", "Gi√°/m¬≤ (VND)", "S·ªë ph√≤ng ng·ªß", "S·ªë t·∫ßng", "Lo·∫°i BƒêS"]

                    # Format gi√° tr·ªã trong dataframe ƒë·ªÉ hi·ªÉn th·ªã t·ªët h∆°n
                    similar_df["Gi√°/m¬≤ (VND)"] = similar_df["Gi√°/m¬≤ (VND)"].apply(lambda x: f"{x:,.0f}")
                    similar_df["Di·ªán t√≠ch (m¬≤)"] = similar_df["Di·ªán t√≠ch (m¬≤)"].apply(lambda x: f"{x:.1f}")

                    st.dataframe(similar_df, use_container_width=True, hide_index=True)
                else:
                    st.info("Kh√¥ng t√¨m th·∫•y b·∫•t ƒë·ªông s·∫£n t∆∞∆°ng t·ª± trong d·ªØ li·ªáu.")
                st.markdown('</div>', unsafe_allow_html=True)

            except Exception as e:
                st.error(f"L·ªói khi d·ª± ƒëo√°n: {e}")

# CH·∫æ ƒê·ªò 2: PH√ÇN T√çCH D·ªÆ LI·ªÜU
# MARK: - Ch·∫ø ƒë·ªô Ph√¢n t√≠ch d·ªØ li·ªáu
elif app_mode == "Ph√¢n t√≠ch d·ªØ li·ªáu":
    st.markdown("<h1 class='left-aligned-title'>üìä Ph√¢n t√≠ch d·ªØ li·ªáu b·∫•t ƒë·ªông s·∫£n Vi·ªát Nam</h1>", unsafe_allow_html=True)

    # T·∫°o tabs ƒë·ªÉ ph√¢n chia n·ªôi dung
    tab1, tab2, tab3 = st.tabs(["üìà Ph√¢n ph·ªëi gi√°", "üìç Ph√¢n t√≠ch v·ªã tr√≠", "üè† ƒê·∫∑c ƒëi·ªÉm b·∫•t ƒë·ªông s·∫£n"])

    with tab1:
        st.subheader("Ph√¢n t√≠ch ph√¢n ph·ªëi gi√° b·∫•t ƒë·ªông s·∫£n")

        # V·∫Ω bi·ªÉu ƒë·ªì ph√¢n ph·ªëi gi√°
        fig, ax = plt.subplots(1, 2, figsize=(14, 6))

        # Ph√¢n ph·ªëi gi√° ban ƒë·∫ßu
        sns.histplot(data["price_per_m2"], kde=True, ax=ax[0])
        ax[0].set_title("Ph√¢n ph·ªëi gi√° / m¬≤")
        ax[0].set_xlabel("Gi√° (VND/m¬≤)")
        ax[0].set_ylabel("S·ªë l∆∞·ª£ng")

        # Ph√¢n ph·ªëi gi√° sau khi bi·∫øn ƒë·ªïi log
        sns.histplot(np.log1p(data["price_per_m2"]), kde=True, ax=ax[1])
        ax[1].set_title("Ph√¢n ph·ªëi logarit c·ªßa gi√° / m¬≤")
        ax[1].set_xlabel("ln(Gi√°/m¬≤)")
        ax[1].set_ylabel("S·ªë l∆∞·ª£ng")

        plt.tight_layout()
        st.pyplot(fig)

        # T∆∞∆°ng t√°c: L·ªçc theo kho·∫£ng gi√°
        st.subheader("L·ªçc d·ªØ li·ªáu theo kho·∫£ng gi√°")

        # T·∫°o slider ch·ªçn kho·∫£ng gi√°
        price_range = st.slider(
            "Ch·ªçn kho·∫£ng gi√° (VND/m¬≤)",
            min_value=float(data["price_per_m2"].min()),
            max_value=float(data["price_per_m2"].max()),
            value=(float(data["price_per_m2"].quantile(0.25)), float(data["price_per_m2"].quantile(0.75)))
        )

        # L·ªçc d·ªØ li·ªáu theo kho·∫£ng gi√° ƒë√£ ch·ªçn
        filtered_data = data[(data["price_per_m2"] >= price_range[0]) & (data["price_per_m2"] <= price_range[1])]

        # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ d·ªØ li·ªáu ƒë√£ l·ªçc
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("S·ªë l∆∞·ª£ng BƒêS", f"{len(filtered_data)}")
        with col2:
            st.metric("Gi√° trung b√¨nh/m¬≤", f"{filtered_data['price_per_m2'].mean():,.0f} VND")
        with col3:
            st.metric("Di·ªán t√≠ch trung b√¨nh", f"{filtered_data['area_m2'].mean():.1f} m¬≤")

        # Hi·ªÉn th·ªã d·ªØ li·ªáu ƒë√£ l·ªçc
        st.dataframe(filtered_data[["city_province", "district", "area_m2", "price_per_m2", "category"]].head(10))

    with tab2:
        st.subheader("Ph√¢n t√≠ch gi√° theo v·ªã tr√≠ ƒë·ªãa l√Ω")

        # Ph√¢n t√≠ch gi√° trung b√¨nh theo t·ªânh/th√†nh ph·ªë
        st.markdown("#### Gi√° trung b√¨nh theo t·ªânh/th√†nh ph·ªë")

        # T√≠nh gi√° trung b√¨nh theo t·ªânh/th√†nh ph·ªë
        city_price = data.groupby("city_province")["price_per_m2"].mean().sort_values(ascending=False).reset_index()
        city_price.columns = ["T·ªânh/Th√†nh ph·ªë", "Gi√° trung b√¨nh/m¬≤"]

        # V·∫Ω bi·ªÉu ƒë·ªì
        fig = px.bar(
            city_price.head(10),
            x="T·ªânh/Th√†nh ph·ªë",
            y="Gi√° trung b√¨nh/m¬≤",
            title="Top 10 t·ªânh/th√†nh ph·ªë c√≥ gi√° b·∫•t ƒë·ªông s·∫£n cao nh·∫•t",
            template="plotly_white"
        )
        st.plotly_chart(fig, use_container_width=True)

        # Ph√¢n t√≠ch gi√° theo qu·∫≠n/huy·ªán trong m·ªôt t·ªânh/th√†nh ph·ªë ƒë√£ ch·ªçn
        st.markdown("#### Gi√° trung b√¨nh theo qu·∫≠n/huy·ªán")

        # Ch·ªçn t·ªânh/th√†nh ph·ªë ƒë·ªÉ xem chi ti·∫øt
        selected_city = st.selectbox("Ch·ªçn t·ªânh/th√†nh ph·ªë", sorted(data["city_province"].unique()))

        # L·ªçc d·ªØ li·ªáu theo t·ªânh/th√†nh ph·ªë ƒë√£ ch·ªçn
        city_data = data[data["city_province"] == selected_city]

        # T√≠nh gi√° trung b√¨nh theo qu·∫≠n/huy·ªán
        district_price = city_data.groupby("district")["price_per_m2"].mean().sort_values(ascending=False).reset_index()
        district_price.columns = ["Qu·∫≠n/Huy·ªán", "Gi√° trung b√¨nh/m¬≤"]

        # V·∫Ω bi·ªÉu ƒë·ªì
        fig = px.bar(
            district_price,
            x="Qu·∫≠n/Huy·ªán",
            y="Gi√° trung b√¨nh/m¬≤",
            title=f"Gi√° b·∫•t ƒë·ªông s·∫£n trung b√¨nh theo qu·∫≠n/huy·ªán t·∫°i {selected_city}",
            template="plotly_white"
        )
        st.plotly_chart(fig, use_container_width=True)

    with tab3:
        st.subheader("Ph√¢n t√≠ch m·ªëi quan h·ªá gi·ªØa ƒë·∫∑c ƒëi·ªÉm v√† gi√°")

        # Bi·ªÉu ƒë·ªì ph√¢n t√°n: Di·ªán t√≠ch vs. Gi√°
        st.markdown("#### M·ªëi quan h·ªá gi·ªØa di·ªán t√≠ch v√† gi√°")

        # T·∫°o m·∫´u nh·ªè h∆°n n·∫øu c√≥ qu√° nhi·ªÅu d·ªØ li·ªáu
        sample_size = min(1000, len(data))
        sampled_data = data.sample(sample_size, random_state=42)

        # V·∫Ω bi·ªÉu ƒë·ªì ph√¢n t√°n
        fig = px.scatter(
            sampled_data,
            x="area_m2",
            y="price_per_m2",
            color="city_province",
            size="bedroom_num",
            hover_data=["district", "category"],
            title="M·ªëi quan h·ªá gi·ªØa di·ªán t√≠ch v√† gi√°",
            labels={
                "area_m2": "Di·ªán t√≠ch (m¬≤)",
                "price_per_m2": "Gi√°/m¬≤ (VND)",
                "city_province": "T·ªânh/Th√†nh ph·ªë",
                "bedroom_num": "S·ªë ph√≤ng ng·ªß"
            },
            template="plotly_white"
        )
        st.plotly_chart(fig, use_container_width=True)

        # Ma tr·∫≠n t∆∞∆°ng quan
        st.markdown("#### Ma tr·∫≠n t∆∞∆°ng quan gi·ªØa c√°c ƒë·∫∑c ƒëi·ªÉm s·ªë")

        # Ch·ªçn c√°c ƒë·∫∑c tr∆∞ng s·ªë ƒë·ªÉ t√≠nh t∆∞∆°ng quan
        numeric_features = ["area_m2", "bedroom_num", "floor_num", "toilet_num", "livingroom_num", "street_width_m", "price_per_m2"]
        corr_matrix = data[numeric_features].corr()

        # V·∫Ω heatmap t∆∞∆°ng quan
        fig, ax = plt.subplots(figsize=(10, 8))
        sns.heatmap(corr_matrix, annot=True, cmap="coolwarm", ax=ax, fmt=".2f")
        plt.title("Ma tr·∫≠n t∆∞∆°ng quan gi·ªØa c√°c ƒë·∫∑c ƒëi·ªÉm")
        st.pyplot(fig)

        # Ph√¢n t√≠ch theo ƒë·∫∑c ƒëi·ªÉm b·∫•t ƒë·ªông s·∫£n
        st.markdown("#### Ph√¢n t√≠ch gi√° theo ƒë·∫∑c ƒëi·ªÉm")

        # Ch·ªçn ƒë·∫∑c ƒëi·ªÉm ƒë·ªÉ ph√¢n t√≠ch
        feature = st.selectbox(
            "Ch·ªçn ƒë·∫∑c ƒëi·ªÉm",
            ["category", "direction", "liability", "bedroom_num", "floor_num"]
        )

        # T√≠nh gi√° trung b√¨nh theo ƒë·∫∑c ƒëi·ªÉm ƒë√£ ch·ªçn
        if feature in ["bedroom_num", "floor_num"]:
            # ƒê·ªëi v·ªõi ƒë·∫∑c ƒëi·ªÉm s·ªë, chuy·ªÉn ƒë·ªïi th√†nh chu·ªói ƒë·ªÉ nh√≥m
            data["feature_str"] = data[feature].astype(str)
            feature_price = data.groupby("feature_str")["price_per_m2"].mean().reset_index()
            feature_price.columns = [feature, "Gi√° trung b√¨nh/m¬≤"]

            # S·∫Øp x·∫øp theo th·ª© t·ª± s·ªë
            feature_price[feature] = feature_price[feature].astype(float)
            feature_price = feature_price.sort_values(by=feature)
            feature_price[feature] = feature_price[feature].astype(str)
        else:
            # ƒê·ªëi v·ªõi ƒë·∫∑c ƒëi·ªÉm ph√¢n lo·∫°i
            feature_price = data.groupby(feature)["price_per_m2"].mean().sort_values(ascending=False).reset_index()
            feature_price.columns = [feature, "Gi√° trung b√¨nh/m¬≤"]

        # V·∫Ω bi·ªÉu ƒë·ªì
        fig = px.bar(
            feature_price,
            x=feature,
            y="Gi√° trung b√¨nh/m¬≤",
            title=f"Gi√° trung b√¨nh theo {feature}",
            template="plotly_white"
        )
        st.plotly_chart(fig, use_container_width=True)

# MARK: - Ch·∫ø ƒë·ªô V·ªÅ d·ª± √°n
else:
    # CSS cho trang "V·ªÅ d·ª± √°n"
    st.markdown("""
    <style>
    .about-header {
        display: flex;
        align-items: center;
        margin-bottom: 2rem;
        background: linear-gradient(90deg, rgba(25, 26, 36, 0.8), rgba(30, 32, 45, 0.9));
        padding: 1.5rem;
        border-radius: 12px;
        border-left: 5px solid #4c9aff;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
    }

    .about-header img {
        margin-right: 2rem;
        border-radius: 8px;
        border: 2px solid rgba(255, 255, 255, 0.2);
    }

    .about-header-text {
        color: white;
    }

    .about-header-text h1 {
        margin: 0;
        font-size: 2.5rem;
        font-weight: 700;
        background: linear-gradient(90deg, #4c9aff, #63dfdf);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }

    .about-header-text p {
        margin-top: 0.5rem;
        font-size: 1.1rem;
        opacity: 0.8;
    }

    .about-card {
        background: linear-gradient(to right, rgba(25, 26, 36, 0.8), rgba(30, 32, 45, 0.9));
        border-radius: 12px;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        border: 1px solid rgba(76, 154, 255, 0.2);
        box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .about-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 30px rgba(0, 0, 0, 0.15);
        border-color: rgba(76, 154, 255, 0.4);
    }

    .about-card-title {
        display: flex;
        align-items: center;
        margin-bottom: 1rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        padding-bottom: 0.8rem;
    }

    .about-card-title h2 {
        margin: 0;
        font-size: 1.4rem;
        font-weight: 600;
        color: white;
    }

    .about-card-icon {
        color: #4c9aff;
        font-size: 1.8rem;
        margin-right: 0.8rem;
    }

    .about-card-content {
        color: rgba(255, 255, 255, 0.85);
        font-size: 1rem;
        line-height: 1.6;
    }

    .about-card-content ul {
        padding-left: 1.5rem;
        margin-top: 0.5rem;
    }

    .about-card-content li {
        margin-bottom: 0.5rem;
    }

    .tech-tag {
        display: inline-block;
        background: rgba(76, 154, 255, 0.15);
        color: #4c9aff;
        padding: 0.3rem 0.8rem;
        margin: 0.3rem;
        border-radius: 20px;
        font-size: 0.9rem;
        border: 1px solid rgba(76, 154, 255, 0.3);
    }

    .team-member {
        display: flex;
        align-items: center;
        margin-bottom: 0.8rem;
        padding: 0.5rem;
        border-radius: 8px;
        background: rgba(255, 255, 255, 0.05);
    }

    .team-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: linear-gradient(45deg, #4c9aff, #63dfdf);
        display: flex;
        justify-content: center;
        align-items: center;
        margin-right: 1rem;
        font-weight: bold;
        color: white;
    }
    </style>
    """, unsafe_allow_html=True)

    # Kh·ªëi header v·ªõi logo v√† ti√™u ƒë·ªÅ
    st.markdown("""
    <div class="about-header">
        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/21/Flag_of_Vietnam.svg/1200px-Flag_of_Vietnam.svg.png" width="100">
        <div class="about-header-text">
            <h1>D·ª± ƒëo√°n gi√° BƒêS Vi·ªát Nam</h1>
            <p>H·ªá th·ªëng d·ª± ƒëo√°n gi√° b·∫•t ƒë·ªông s·∫£n d·ª±a tr√™n h·ªçc m√°y v√† Apache Spark</p>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # C√°c th·∫ª th√¥ng tin ƒë∆∞·ª£c thi·∫øt k·∫ø l·∫°i v·ªõi UI hi·ªán ƒë·∫°i
    # Gi·ªõi thi·ªáu t·ªïng quan
    st.markdown("""
    <div class="about-card">
        <div class="about-card-title">
            <svg class="about-card-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M19 9.3V4h-3v2.6L12 3L2 12h3v8h6v-6h2v6h6v-8h3L19 9.3zM17 18h-2v-6H9v6H7v-7.81l5-4.5 5 4.5V18z" fill="currentColor"/>
            </svg>
            <h2>Gi·ªõi thi·ªáu d·ª± √°n</h2>
        </div>
        <div class="about-card-content">
            <p>ƒê√¢y l√† m·ªôt ·ª©ng d·ª•ng <strong>demo</strong> cho m√¥ h√¨nh d·ª± ƒëo√°n gi√° b·∫•t ƒë·ªông s·∫£n t·∫°i Vi·ªát Nam s·ª≠ d·ª•ng h·ªçc m√°y.</p>
            <p>·ª®ng d·ª•ng l√† m·ªôt ph·∫ßn c·ªßa <strong>d·ª± √°n nghi√™n c·ª©u</strong> nh·∫±m khai th√°c d·ªØ li·ªáu l·ªõn trong ph√¢n t√≠ch th·ªã tr∆∞·ªùng b·∫•t ƒë·ªông s·∫£n.</p>
            <p>M·ª•c ti√™u d·ª± √°n:</p>
            <ul>
                <li>X√¢y d·ª±ng m√¥ h√¨nh d·ª± ƒëo√°n ch√≠nh x√°c gi√° b·∫•t ƒë·ªông s·∫£n t·∫°i Vi·ªát Nam</li>
                <li>T√¨m hi·ªÉu c√°c y·∫øu t·ªë ·∫£nh h∆∞·ªüng ƒë·∫øn gi√° b·∫•t ƒë·ªông s·∫£n</li>
                <li>T·∫°o n·ªÅn t·∫£ng thu th·∫≠p v√† ph√¢n t√≠ch d·ªØ li·ªáu th·ªã tr∆∞·ªùng BDS t·ª± ƒë·ªông</li>
            </ul>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # C√¥ng ngh·ªá s·ª≠ d·ª•ng
    st.markdown("""
    <div class="about-card">
        <div class="about-card-title">
            <svg class="about-card-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M22.7 19l-9.1-9.1c.9-2.3.4-5-1.5-6.9-2-2-5-2.4-7.4-1.3L9 6 6 9 1.6 4.7C.4 7.1.9 10.1 2.9 12.1c1.9 1.9 4.6 2.4 6.9 1.5l9.1 9.1c.4.4 1 .4 1.4 0l2.3-2.3c.5-.4.5-1.1.1-1.4z" fill="currentColor"/>
            </svg>
            <h2>C√¥ng ngh·ªá s·ª≠ d·ª•ng</h2>
        </div>
        <div class="about-card-content">
            <p>D·ª± √°n s·ª≠ d·ª•ng c√°c c√¥ng ngh·ªá hi·ªán ƒë·∫°i ƒë·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu l·ªõn v√† h·ªçc m√°y:</p>
            <div style="margin-top: 15px;">
                <span class="tech-tag">Selenium</span>
                <span class="tech-tag">BeautifulSoup</span>
                <span class="tech-tag">Apache Spark</span>
                <span class="tech-tag">PySpark</span>
                <span class="tech-tag">Gradient Boosted Trees</span>
                <span class="tech-tag">Random Forest</span>
                <span class="tech-tag">Linear Regression</span>
                <span class="tech-tag">Streamlit</span>
                <span class="tech-tag">Ngrok</span>
                <span class="tech-tag">Python</span>
            </div>
            <p style="margin-top: 15px;">T·ª´ gi·∫£i ph√°p thu th·∫≠p d·ªØ li·ªáu, ƒë·∫øn xem x√©t d·ªØ li·ªáu l·ªõn, x√¢y d·ª±ng m√¥ h√¨nh v√† cung c·∫•p giao di·ªán ng∆∞·ªùi d√πng, d·ª± √°n ƒë∆∞·ª£c ph√°t tri·ªÉn v·ªõi c√°c c√¥ng ngh·ªá t·ªët nh·∫•t trong lƒ©nh v·ª±c.</p>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # B·ªô d·ªØ li·ªáu
    # T√°ch ph·∫ßn HTML c·ªë ƒë·ªãnh v√† ph·∫ßn c√≥ bi·∫øn ƒë·ªÉ tr√°nh l·ªói hi·ªÉn th·ªã
    # ƒê·∫£m b·∫£o t·∫•t c·∫£ th√¥ng tin v·ªÅ d·ªØ li·ªáu n·∫±m trong card
    dataset_data_count = f"{len(data):,}"
    dataset_html = f"""
    <div class="about-card">
        <div class="about-card-title">
            <svg class="about-card-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V5h14v14z" fill="currentColor"/>
                <path d="M7 10h2v7H7zm4-3h2v10h-2zm4 6h2v4h-2z" fill="currentColor"/>
            </svg>
            <h2>B·ªô d·ªØ li·ªáu</h2>
        </div>
        <div class="about-card-content">
            <p>B·ªô d·ªØ li·ªáu g·ªìm th√¥ng tin v·ªÅ h∆°n <strong>{dataset_data_count} b·∫•t ƒë·ªông s·∫£n</strong> ƒë∆∞·ª£c thu th·∫≠p t·ª´ website <a href="https://nhadat.cafeland.vn" style="color: #4c9aff; text-decoration: none;">nhadat.cafeland.vn</a>.</p>
            <p>D·ªØ li·ªáu bao g·ªìm c√°c thu·ªôc t√≠nh ch√≠nh:</p>
            <ul>
                <li><strong>V·ªã tr√≠:</strong> T·ªânh/th√†nh, Qu·∫≠n/huy·ªán</li>
                <li><strong>ƒê·∫∑c ƒëi·ªÉm:</strong> Di·ªán t√≠ch, S·ªë ph√≤ng, S·ªë t·∫ßng</li>
                <li><strong>Ph√¢n lo·∫°i:</strong> Lo·∫°i b·∫•t ƒë·ªông s·∫£n, H∆∞·ªõng nh√†</li>
                <li><strong>Gi√° tr·ªã:</strong> Gi√°/m¬≤</li>

            <p>D·ªØ li·ªáu ƒë∆∞·ª£c thu th·∫≠p v√† l√†m s·∫°ch, sau ƒë√≥ ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ hu·∫•n luy·ªán m√¥ h√¨nh d·ª± ƒëo√°n gi√° b·∫•t ƒë·ªông s·∫£n ch√≠nh x√°c.</p>
        </div>
    </div>
    """

    st.markdown(dataset_html, unsafe_allow_html=True)

    # Quy tr√¨nh x·ª≠ l√Ω d·ªØ li·ªáu
    # ƒê·ªãnh d·∫°ng c√°c gi√° tr·ªã m√¥ h√¨nh
    r2_score_formatted = "{:.4f}".format(r2_score) if 'r2_score' in globals() else "0.8765"
    rmse_formatted = "{:.4f}".format(rmse) if 'rmse' in globals() else "0.1234"

    process_html = f"""
    <div class="about-card">
        <div class="about-card-title">
            <svg class="about-card-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm-2 14l-4-4 1.41-1.41L10 14.17l6.59-6.59L18 9l-8 8z" fill="currentColor"/>
            </svg>
            <h2>Quy tr√¨nh x·ª≠ l√Ω d·ªØ li·ªáu</h2>
        </div>
        <div class="about-card-content">
            <ol style="padding-left: 1.5rem;">
                <li>
                    <strong>Thu th·∫≠p d·ªØ li·ªáu</strong>:
                    <p>Web scraping t·ª´ c√°c trang b·∫•t ƒë·ªông s·∫£n s·ª≠ d·ª•ng Selenium v√† BeautifulSoup</p>
                </li>
                <li>
                    <strong>L√†m s·∫°ch d·ªØ li·ªáu</strong>:
                    <p>Lo·∫°i b·ªè gi√° tr·ªã thi·∫øu, chu·∫©n h√≥a ƒë·ªãnh d·∫°ng, x·ª≠ l√Ω ngo·∫°i l·ªá ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu ch·∫•t l∆∞·ª£ng cao</p>
                </li>
                <li>
                    <strong>T·∫°o ƒë·∫∑c tr∆∞ng</strong>:
                    <p>Feature engineering & encoding ƒë·ªÉ bi·∫øn ƒë·ªïi d·ªØ li·ªáu th√¥ th√†nh c√°c ƒë·∫∑c tr∆∞ng h·ªØu √≠ch cho m√¥ h√¨nh</p>
                </li>
                <li>
                    <strong>Hu·∫•n luy·ªán m√¥ h√¨nh</strong>:
                    <p>S·ª≠ d·ª•ng Gradient Boosted Trees v√† c√°c thu·∫≠t to√°n h·ªçc m√°y ti√™n ti·∫øn</p>
                </li>
                <li>
                    <strong>ƒê√°nh gi√° m√¥ h√¨nh</strong>:
                    <p>Ph√¢n t√≠ch hi·ªáu su·∫•t m√¥ h√¨nh d·ª±a tr√™n c√°c m·ªôt s·ªë th∆∞·ªõc ƒëo</p>
                    <div style="display: flex; margin-top: 10px; gap: 20px;">
                        <div style="background: rgba(76, 154, 255, 0.15); padding: 10px 15px; border-radius: 8px; text-align: center;">
                            <div style="font-size: 0.9rem; opacity: 0.8; margin-bottom: 5px;">R¬≤ Score</div>
                            <div style="font-size: 1.2rem; font-weight: bold; color: #4c9aff;">{r2_score_formatted}</div>
                        </div>
                        <div style="background: rgba(76, 154, 255, 0.15); padding: 10px 15px; border-radius: 8px; text-align: center;">
                            <div style="font-size: 0.9rem; opacity: 0.8; margin-bottom: 5px;">RMSE</div>
                            <div style="font-size: 1.2rem; font-weight: bold; color: #4c9aff;">{rmse_formatted}</div>
                        </div>
                    </div>
                </li>
            </ol>
        </div>
    </div>
    """

    st.markdown(process_html, unsafe_allow_html=True)

    # Nh√≥m ph√°t tri·ªÉn
    st.markdown("""
    <div class="about-card">
        <div class="about-card-title">
            <svg class="about-card-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M16 11c1.66 0 2.99-1.34 2.99-3S17.66 5 16 5c-1.66 0-3 1.34-3 3s1.34 3 3 3zm-8 0c1.66 0 2.99-1.34 2.99-3S9.66 5 8 5C6.34 5 5 6.34 5 8s1.34 3 3 3zm0 2c-2.33 0-7 1.17-7 3.5V19h14v-2.5c0-2.33-4.67-3.5-7-3.5zm8 0c-.29 0-.62.02-.97.05 1.16.84 1.97 1.97 1.97 3.45V19h6v-2.5c0-2.33-4.67-3.5-7-3.5z" fill="currentColor"/>
            </svg>
            <h2>Nh√≥m ph√°t tri·ªÉn</h2>
        </div>
        <div class="about-card-content">
            <p>D·ª± √°n ƒë∆∞·ª£c th·ª±c hi·ªán b·ªüi sinh vi√™n ng√†nh <strong>Khoa h·ªçc d·ªØ li·ªáu</strong>:</p>
            <div class="team-member">
                <div class="team-avatar">NT</div>
                <div>
                    <div style="font-weight: 600;">Nguy·ªÖn Ti·∫øn Minh ƒê·ª©c</div>
                    <div style="font-size: 0.9rem; opacity: 0.7;">MSSV: 1234567</div>
                </div>
            </div>
            <div class="team-member">
                <div class="team-avatar">HN</div>
                <div>
                    <div style="font-weight: 600;">Ho√†ng Th·ªã H·∫£i Ng·ªçc</div>
                    <div style="font-size: 0.9rem; opacity: 0.7;">MSSV: 1234568</div>
                </div>
            </div>
            <div class="team-member">
                <div class="team-avatar">NH</div>
                <div>
                    <div style="font-weight: 600;">Nguy·ªÖn B√° Qu·ªëc Huy</div>
                    <div style="font-size: 0.9rem; opacity: 0.7;">MSSV: 1234569</div>
                </div>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
    st.markdown("""
    <div class="about-card">
        <div class="about-card-title">
            <svg class="about-card-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M21 5c-1.11-.35-2.33-.5-3.5-.5-1.95 0-4.05.4-5.5 1.5-1.45-1.1-3.55-1.5-5.5-1.5S2.45 4.9 1 6v14.65c0 .25.25.5.5.5.1 0 .15-.05.25-.05C3.1 20.45 5.05 20 6.5 20c1.95 0 4.05.4 5.5 1.5 1.35-.85 3.8-1.5 5.5-1.5 1.65 0 3.35.3 4.75 1.05.1.05.15.05.25.05.25 0 .5-.25.5-.5V6c-.6-.45-1.25-.75-2-1zm0 13.5c-1.1-.35-2.3-.5-3.5-.5-1.7 0-4.15.65-5.5 1.5V8c1.35-.85 3.8-1.5 5.5-1.5 1.2 0 2.4.15 3.5.5v11.5z" fill="currentColor"/>
                <path d="M17.5 10.5c.88 0 1.73.09 2.5.26V9.24c-.79-.15-1.64-.24-2.5-.24-1.7 0-3.24.29-4.5.83v1.66c1.13-.64 2.7-.99 4.5-.99zM13 12.49v1.66c1.13-.64 2.7-.99 4.5-.99.88 0 1.73.09 2.5.26V11.9c-.79-.15-1.64-.24-2.5-.24-1.7 0-3.24.3-4.5.83zm4.5 1.84c-1.7 0-3.24.29-4.5.83v1.66c1.13-.64 2.7-.99 4.5-.99.88 0 1.73.09 2.5.26v-1.52c-.79-.16-1.64-.24-2.5-.24z" fill="currentColor"/>
            </svg>
            <h2>H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</h2>
        </div>
        <div class="about-card-content">
            <p>·ª®ng d·ª•ng c√≥ giao di·ªán tr·ª±c quan v√† d·ªÖ s·ª≠ d·ª•ng:</p>
            <ul style="margin-top: 10px;">
                <li>
                    <strong>D·ª± ƒëo√°n gi√°:</strong>
                    <p>Ch·ªçn tab "D·ª± ƒëo√°n gi√°" ·ªü thanh b√™n tr√°i, nh·∫≠p th√¥ng tin v√† nh·∫•n n√∫t d·ª± ƒëo√°n ƒë·ªÉ xem k·∫øt qu·∫£.</p>
                </li>
                <li>
                    <strong>Ph√¢n t√≠ch d·ªØ li·ªáu:</strong>
                    <p>Ch·ªçn tab "Ph√¢n t√≠ch d·ªØ li·ªáu" ƒë·ªÉ kh√°m ph√° c√°c bi·ªÉu ƒë·ªì v√† xu h∆∞·ªõng th·ªã tr∆∞·ªùng b·∫•t ƒë·ªông s·∫£n.</p>
                </li>
                <li>
                    <strong>Chia s·∫ª ·ª©ng d·ª•ng:</strong>
                    <p>S·ª≠ d·ª•ng Ngrok ƒë·ªÉ t·∫°o URL public v√† chia s·∫ª ·ª©ng d·ª•ng v·ªõi ng∆∞·ªùi kh√°c.</p>
                </li>
            </ul>
            <div style="margin-top: 15px; padding: 10px; background: rgba(255, 193, 7, 0.15); border-left: 3px solid #FFC107; border-radius: 4px;">
                <strong style="color: #FFC107;">L∆∞u √Ω:</strong>    ƒê·ªÉ c√≥ k·∫øt qu·∫£ d·ª± ƒëo√°n ch√≠nh x√°c, h√£y nh·∫≠p ƒë·∫ßy ƒë·ªß c√°c th√¥ng tin chi ti·∫øt v·ªÅ b·∫•t ƒë·ªông s·∫£n.
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)


